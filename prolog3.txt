%77.Определим операторы:
:- op( 100, fy, ~).
:- op( 110, xfy, &).
:- op( 120, xfy, v).

Булева формула есть терм, определяемый следующим образом: константы true и false - булевы форму-лы; если X и Y - булевы формулы, то и X v Y, X & Y, ~X - булевы формулы, здесь v и & - бинарные инфиксные операторы дизъюнкции и конъюнкции, а  ~ - унарный оператор отрицания.  Напишите программу, задающую отношение negation_inward(+F1,-F2), которое выполнено, если логи-ческая формула F2 получается из логической формулы F1 внесением всех операторов отрицания внутрь конъюнкций и дизъюнкций.
Подсказка. Вы должны написать по одному правилу для каждого следующего случая:
(для краткости записи используем обозначения из математической логики)
1.	Если исходная формула имеет вид true или  false, то ответ совпадает с исходной формулой.
2.	Если исходная формула имеет вид ?X или X, где X есть атом, то ответ совпадает с исходной формулой.
3.	Если исходная формула имеет вид ??X, то результат равен рекурсивному применению преди-ката negation_inward для X.
4.	Если исходная формула имеет вид X & Y, то результат равен конъюнкции рекурсивных вызовов предиката negation_inward для X и Y.
5.	Если исходная формула имеет вид X ? Y, то результат равен дизъюнкции рекурсивных вызовов предиката negation_inward для X и Y.
6.	Если исходная формула имеет вид ?(X ? Y), то результат равен конъюнкции рекурсивных вызо-вов предиката negation_inward для ?X и ?Y (закон де Моргана).
7.	Если исходная формула имеет вид ?(X & Y), то результат равен дизъюнкции рекурсивных вызо-вов предиката negation_inward для ?X и ?Y (закон де Моргана).

 
val(X):-atom(X).
val(~X):-atom(X).
diz(X):-val(X).
diz(X v Y):-val(X), diz(Y).
kon(X):-diz(X).
kon(X & Y):-diz(X), kon(Y).
%kon((~a v c) & b)

negation_inwards(A, A):-atom(A).
negation_inwards(~A, ~A):-atom(A).
negation_inwards(~(~A),A1):-negation_inwards(A,A1).
negation_inwards(~(A v B),A1 & B1):-negation_inwards(~A,A1), negation_inwards(~B,B1).
negation_inwards(~(A & B),A1 v B1):-negation_inwards(~A,A1), negation_inwards(~B,B1).
negation_inwards(A v B, A1 v B1):-negation_inwards(A,A1), negation_inwards(B,B1).
negation_inwards(A & B, A1 & B1):-negation_inwards(A,A1), negation_inwards(B,B1).
%negation_inwards(~(~(a v ~b) v (~c & d))&e, X).

